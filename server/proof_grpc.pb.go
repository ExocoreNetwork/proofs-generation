// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proof.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProofService_GetValidatorProof_FullMethodName  = "/proof.ProofService/GetValidatorProof"
	ProofService_GetWithdrawalProof_FullMethodName = "/proof.ProofService/GetWithdrawalProof"
)

// ProofServiceClient is the client API for ProofService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProofServiceClient interface {
	GetValidatorProof(ctx context.Context, in *ValidatorProofRequest, opts ...grpc.CallOption) (*ValidatorProofResponse, error)
	GetWithdrawalProof(ctx context.Context, in *WithdrawalProofRequest, opts ...grpc.CallOption) (*WithdrawalProofResponse, error)
}

type proofServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProofServiceClient(cc grpc.ClientConnInterface) ProofServiceClient {
	return &proofServiceClient{cc}
}

func (c *proofServiceClient) GetValidatorProof(ctx context.Context, in *ValidatorProofRequest, opts ...grpc.CallOption) (*ValidatorProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidatorProofResponse)
	err := c.cc.Invoke(ctx, ProofService_GetValidatorProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proofServiceClient) GetWithdrawalProof(ctx context.Context, in *WithdrawalProofRequest, opts ...grpc.CallOption) (*WithdrawalProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawalProofResponse)
	err := c.cc.Invoke(ctx, ProofService_GetWithdrawalProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProofServiceServer is the server API for ProofService service.
// All implementations must embed UnimplementedProofServiceServer
// for forward compatibility.
type ProofServiceServer interface {
	GetValidatorProof(context.Context, *ValidatorProofRequest) (*ValidatorProofResponse, error)
	GetWithdrawalProof(context.Context, *WithdrawalProofRequest) (*WithdrawalProofResponse, error)
	mustEmbedUnimplementedProofServiceServer()
}

// UnimplementedProofServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProofServiceServer struct{}

func (UnimplementedProofServiceServer) GetValidatorProof(context.Context, *ValidatorProofRequest) (*ValidatorProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorProof not implemented")
}
func (UnimplementedProofServiceServer) GetWithdrawalProof(context.Context, *WithdrawalProofRequest) (*WithdrawalProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawalProof not implemented")
}
func (UnimplementedProofServiceServer) mustEmbedUnimplementedProofServiceServer() {}
func (UnimplementedProofServiceServer) testEmbeddedByValue()                      {}

// UnsafeProofServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProofServiceServer will
// result in compilation errors.
type UnsafeProofServiceServer interface {
	mustEmbedUnimplementedProofServiceServer()
}

func RegisterProofServiceServer(s grpc.ServiceRegistrar, srv ProofServiceServer) {
	// If the following call pancis, it indicates UnimplementedProofServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProofService_ServiceDesc, srv)
}

func _ProofService_GetValidatorProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProofServiceServer).GetValidatorProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProofService_GetValidatorProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProofServiceServer).GetValidatorProof(ctx, req.(*ValidatorProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProofService_GetWithdrawalProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProofServiceServer).GetWithdrawalProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProofService_GetWithdrawalProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProofServiceServer).GetWithdrawalProof(ctx, req.(*WithdrawalProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProofService_ServiceDesc is the grpc.ServiceDesc for ProofService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProofService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proof.ProofService",
	HandlerType: (*ProofServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValidatorProof",
			Handler:    _ProofService_GetValidatorProof_Handler,
		},
		{
			MethodName: "GetWithdrawalProof",
			Handler:    _ProofService_GetWithdrawalProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proof.proto",
}
